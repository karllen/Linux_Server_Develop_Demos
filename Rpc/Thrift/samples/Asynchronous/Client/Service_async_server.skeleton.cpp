// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "Service.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using namespace  ::test::stress;

class ServiceAsyncHandler : public ServiceCobSvIf {
 public:
  ServiceAsyncHandler() {
    syncHandler_ = std::auto_ptr<ServiceHandler>(new ServiceHandler);
    // Your initialization goes here
  }
  virtual ~ServiceAsyncHandler();

  void echoVoid(::apache::thrift::stdcxx::function<void()> cob) {
    syncHandler_->echoVoid();
    return cob();
  }

  void echoByte(::apache::thrift::stdcxx::function<void(int8_t const& _return)> cob, const int8_t arg) {
    int8_t _return = 0;
    _return = syncHandler_->echoByte(arg);
    return cob(_return);
  }

  void echoI32(::apache::thrift::stdcxx::function<void(int32_t const& _return)> cob, const int32_t arg) {
    int32_t _return = 0;
    _return = syncHandler_->echoI32(arg);
    return cob(_return);
  }

  void echoI64(::apache::thrift::stdcxx::function<void(int64_t const& _return)> cob, const int64_t arg) {
    int64_t _return = 0;
    _return = syncHandler_->echoI64(arg);
    return cob(_return);
  }

  void echoString(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, const std::string& arg) {
    std::string _return;
    syncHandler_->echoString(_return, arg);
    return cob(_return);
  }

  void echoList(::apache::thrift::stdcxx::function<void(std::vector<int8_t>  const& _return)> cob, const std::vector<int8_t> & arg) {
    std::vector<int8_t>  _return;
    syncHandler_->echoList(_return, arg);
    return cob(_return);
  }

  void echoSet(::apache::thrift::stdcxx::function<void(std::set<int8_t>  const& _return)> cob, const std::set<int8_t> & arg) {
    std::set<int8_t>  _return;
    syncHandler_->echoSet(_return, arg);
    return cob(_return);
  }

  void echoMap(::apache::thrift::stdcxx::function<void(std::map<int8_t, int8_t>  const& _return)> cob, const std::map<int8_t, int8_t> & arg) {
    std::map<int8_t, int8_t>  _return;
    syncHandler_->echoMap(_return, arg);
    return cob(_return);
  }

 protected:
  std::auto_ptr<ServiceHandler> syncHandler_;
};

