// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.


#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/async/TAsyncProtocolProcessor.h>
#include <thrift/async/TEvhttpServer.h>
#include <event.h>
#include <evhttp.h>
#include <iostream>
#include "Service.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using namespace  ::test::stress;

class ServiceHandler : virtual public ServiceIf {
public:
	ServiceHandler() {
		// Your initialization goes here
	}

	void echoVoid() {
		// Your implementation goes here
		printf("echoVoid\n");
	}

	int8_t echoByte(const int8_t arg) {
		// Your implementation goes here
		printf("echoByte %c\n", arg);
		return arg;
	}

	int32_t echoI32(const int32_t arg) {
		// Your implementation goes here
		printf("echoI32\n");
		return arg;
	}

	int64_t echoI64(const int64_t arg) {
		// Your implementation goes here
		printf("echoI64\n");
		return arg;
	}

	void echoString(std::string& _return, const std::string& arg) {
		// Your implementation goes here
		printf("echoString %s\n", arg.c_str());
		_return = arg;
	}

	void echoList(std::vector<int8_t> & _return, const std::vector<int8_t> & arg) {
		// Your implementation goes here
		printf("echoList\n");
	}

	void echoSet(std::set<int8_t> & _return, const std::set<int8_t> & arg) {
		// Your implementation goes here
		printf("echoSet\n");
	}

	void echoMap(std::map<int8_t, int8_t> & _return, const std::map<int8_t, int8_t> & arg) {
		// Your implementation goes here
		printf("echoMap\n");
	}

};

class ServiceAsyncHandler : public ServiceCobSvIf {
 public:
  ServiceAsyncHandler() {
    syncHandler_ = std::auto_ptr<ServiceHandler>(new ServiceHandler);
    // Your initialization goes here
  }
  virtual ~ServiceAsyncHandler(){}

  void echoVoid(::apache::thrift::stdcxx::function<void()> cob) {
    syncHandler_->echoVoid();
    return cob();
  }

  void echoByte(::apache::thrift::stdcxx::function<void(int8_t const& _return)> cob, const int8_t arg) {
    int8_t _return = 0;
    _return = syncHandler_->echoByte(arg);
    return cob(_return);
  }

  void echoI32(::apache::thrift::stdcxx::function<void(int32_t const& _return)> cob, const int32_t arg) {
    int32_t _return = 0;
    _return = syncHandler_->echoI32(arg);
    return cob(_return);
  }

  void echoI64(::apache::thrift::stdcxx::function<void(int64_t const& _return)> cob, const int64_t arg) {
    int64_t _return = 0;
    _return = syncHandler_->echoI64(arg);
    return cob(_return);
  }

  void echoString(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, const std::string& arg) {
    std::string _return;
    syncHandler_->echoString(_return, arg);
    return cob(_return);
  }

  void echoList(::apache::thrift::stdcxx::function<void(std::vector<int8_t>  const& _return)> cob, const std::vector<int8_t> & arg) {
    std::vector<int8_t>  _return;
    syncHandler_->echoList(_return, arg);
    return cob(_return);
  }

  void echoSet(::apache::thrift::stdcxx::function<void(std::set<int8_t>  const& _return)> cob, const std::set<int8_t> & arg) {
    std::set<int8_t>  _return;
    syncHandler_->echoSet(_return, arg);
    return cob(_return);
  }

  void echoMap(::apache::thrift::stdcxx::function<void(std::map<int8_t, int8_t>  const& _return)> cob, const std::map<int8_t, int8_t> & arg) {
    std::map<int8_t, int8_t>  _return;
    syncHandler_->echoMap(_return, arg);
    return cob(_return);
  }

 protected:
  std::auto_ptr<ServiceHandler> syncHandler_;
};


int main()
{
	::apache::thrift::stdcxx::shared_ptr<ServiceAsyncProcessor> asynProcessor(new ServiceAsyncProcessor(
							::apache::thrift::stdcxx::shared_ptr<ServiceCobSvIf>(new ServiceAsyncHandler())));

	::apache::thrift::stdcxx::shared_ptr<TAsyncProtocolProcessor> asynProtocolProcessor(new TAsyncProtocolProcessor(asynProcessor,
							::apache::thrift::stdcxx::shared_ptr<TProtocolFactory>(new TBinaryProtocolFactory())));

	/*
	//default
	TEvhttpServer server(asynProtocolProcessor, 9999);
	server.serve();
	*/


	TEvhttpServer server(asynProtocolProcessor);

	struct event_base* eb_ = NULL;
	struct evhttp* eh_ = NULL;

	// Create event_base and evhttp.
	eb_ = event_base_new();
	if (eb_ == NULL) 
	{
		std::cout << "event_base_new failed";
	}
	eh_ = evhttp_new(eb_);
	if (eh_ == NULL) 
	{
		event_base_free(eb_);
		std::cout << "evhttp_new failed";
	}

	int ret = evhttp_bind_socket(eh_, "192.168.119.129", 9999);
	if (ret < 0) 
	{
		evhttp_free(eh_);
		event_base_free(eb_);
		std::cout << "evhttp_bind_socket failed";
	}

	evhttp_set_cb(eh_, "/", &TEvhttpServer::request, (void*)&server);

	event_base_dispatch(eb_);

	if (eh_ != NULL) 
	{
		evhttp_free(eh_);
	}

	if (eb_ != NULL) 
	{
		event_base_free(eb_);
	}

	return 0;
}
